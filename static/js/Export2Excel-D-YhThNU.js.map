{"version":3,"file":"Export2Excel-D-YhThNU.js","sources":["../../../src/utils/Export2Excel.ts"],"sourcesContent":["/* eslint-disable */\r\n//表格导出\r\nimport { saveAs } from 'file-saver' //文件下载的插件\r\n// ts 需要安装 @types/file-saver\r\nimport * as XLSX from 'xlsx'\r\nconst env = import.meta.env.VITE_NODE_ENV\r\nconsole.log(env, 'env--------------------')\r\nfunction datenum(v: any, date1904: any) {\r\n    if (date1904) v += 1462\r\n    var epoch = Date.parse(v)\r\n    return (\r\n        (epoch - (new Date(Date.UTC(1899, 11, 30)) as any)) /\r\n        (24 * 60 * 60 * 1000)\r\n    )\r\n}\r\n\r\nfunction sheet_from_array_of_arrays(data: any, opts: any) {\r\n    var ws: any = {}\r\n    var range = {\r\n        s: {\r\n            c: 10000000,\r\n            r: 10000000,\r\n        },\r\n        e: {\r\n            c: 0,\r\n            r: 0,\r\n        },\r\n    }\r\n    for (var R = 0; R != data.length; ++R) {\r\n        for (var C = 0; C != data[R].length; ++C) {\r\n            if (range.s.r > R) range.s.r = R\r\n            if (range.s.c > C) range.s.c = C\r\n            if (range.e.r < R) range.e.r = R\r\n            if (range.e.c < C) range.e.c = C\r\n            var cell: any = {\r\n                v: data[R][C],\r\n            }\r\n            if (cell.v == null) continue\r\n            var cell_ref = XLSX.utils.encode_cell({\r\n                c: C,\r\n                r: R,\r\n            })\r\n\r\n            if (typeof cell.v === 'number') cell.t = 'n'\r\n            else if (typeof cell.v === 'boolean') cell.t = 'b'\r\n            else if (cell.v instanceof Date) {\r\n                cell.t = 'n'\r\n                cell.z = XLSX.SSF._table[14]\r\n                cell.v = datenum(cell.v, void 0)\r\n            } else cell.t = 's'\r\n\r\n            ws[cell_ref] = cell\r\n        }\r\n    }\r\n    if (range.s.c < 10000000) ws['!ref'] = XLSX.utils.encode_range(range)\r\n    return ws\r\n}\r\n\r\nfunction Workbook() {\r\n    if (!(this instanceof Workbook)) return new Workbook()\r\n    this.SheetNames = []\r\n    this.Sheets = {}\r\n}\r\n\r\nfunction s2ab(s: any) {\r\n    var buf = new ArrayBuffer(s.length)\r\n    var view = new Uint8Array(buf)\r\n    for (var i = 0; i != s.length; ++i) view[i] = s.charCodeAt(i) & 0xff\r\n    return buf\r\n}\r\n\r\nexport const export_json_to_excel = ({\r\n    multiHeader = [],\r\n    header,\r\n    data,\r\n    filename,\r\n    merges = [],\r\n    autoWidth = true,\r\n    bookType = 'xlsx',\r\n}: any = {}) => {\r\n    // 1. 设置文件名称\r\n    filename = filename || 'excel-list'\r\n    // 2. 把数据解析为数组，并把表头添加到数组的头部\r\n    data = [...data]\r\n    data.unshift(header)\r\n    // 3. 解析多表头，把多表头的数据添加到数组头部（二维数组）\r\n    for (let i = multiHeader.length - 1; i > -1; i--) {\r\n        data.unshift(multiHeader[i])\r\n    }\r\n    // 4. 设置 Excel 表工作簿（第一张表格）名称\r\n    var ws_name = 'SheetJS'\r\n    // 5. 生成工作簿对象\r\n    var wb = new Workbook()\r\n    // 6. 将 data 数组（json格式）转化为 Excel 数据格式\r\n    var ws = sheet_from_array_of_arrays(data, void 0)\r\n    // 7. 合并单元格相关（['A1:A2', 'B1:D1', 'E1:E2']）\r\n    if (merges.length > 0) {\r\n        if (!ws['!merges']) ws['!merges'] = []\r\n        merges.forEach((item: any) => {\r\n            ws['!merges'].push(XLSX.utils.decode_range(item))\r\n        })\r\n    }\r\n    // 8. 单元格宽度相关\r\n    if (autoWidth) {\r\n        /*设置 worksheet 每列的最大宽度*/\r\n        const colWidth = data.map((row: any) =>\r\n            row.map((val: any) => {\r\n                /*先判断是否为null/undefined*/\r\n                if (val == null) {\r\n                    return {\r\n                        wch: 10,\r\n                    }\r\n                } else if (val.toString().charCodeAt(0) > 255) {\r\n                    /*再判断是否为中文*/\r\n                    return {\r\n                        wch: val.toString().length * 2,\r\n                    }\r\n                } else {\r\n                    return {\r\n                        wch: val.toString().length,\r\n                    }\r\n                }\r\n            })\r\n        )\r\n        /*以第一行为初始值*/\r\n        let result = colWidth[0]\r\n        for (let i = 1; i < colWidth.length; i++) {\r\n            for (let j = 0; j < colWidth[i].length; j++) {\r\n                if (result[j]['wch'] < colWidth[i][j]['wch']) {\r\n                    result[j]['wch'] = colWidth[i][j]['wch']\r\n                }\r\n            }\r\n        }\r\n        ws['!cols'] = result\r\n    }\r\n\r\n    // 9. 添加工作表（解析后的 excel 数据）到工作簿\r\n    wb.SheetNames.push(ws_name)\r\n    wb.Sheets[ws_name] = ws\r\n    // 10. 写入数据\r\n    var wbout = XLSX.write(wb, {\r\n        bookType: bookType,\r\n        bookSST: false,\r\n        type: 'binary',\r\n    })\r\n    // 11. 下载数据\r\n    if (env === 'production') {\r\n        window.saveAs(\r\n            new Blob([s2ab(wbout)], {\r\n                type: 'application/octet-stream',\r\n            }),\r\n            `${filename}.${bookType}`\r\n        )\r\n    } else {\r\n        saveAs(\r\n            new Blob([s2ab(wbout)], {\r\n                type: 'application/octet-stream',\r\n            }),\r\n            `${filename}.${bookType}`\r\n        )\r\n    }\r\n}\r\n"],"names":["Workbook","this","SheetNames","Sheets","s2ab","s","buf","ArrayBuffer","length","view","Uint8Array","i","charCodeAt","console","log","export_json_to_excel","multiHeader","header","data","filename","merges","autoWidth","bookType","unshift","ws_name","wb","ws","opts","v","range","c","r","e","R","C","cell","cell_ref","XLSX","utils","encode_cell","t","Date","z","SSF","_table","parse","UTC","encode_range","sheet_from_array_of_arrays","forEach","item","push","decode_range","colWidth","map","row","val","wch","toString","result","j","wbout","write","bookSST","type","window","saveAs","Blob"],"mappings":"AA0DA,SAAAA,IACI,KAAAC,gBAAAD,GAAiC,OAAA,IAAAA,EACjCC,KAAAC,WAAA,GACAD,KAAAE,OAAA,EACJ,CAEA,SAAAC,EAAAC,GAGI,IAFA,IAAAC,EAAA,IAAAC,YAAAF,EAAAG,QACIC,EAAA,IAAAC,WAAAJ,GACJK,EAAA,EAAAA,GAAAN,EAAAG,SAAAG,EAAoCF,EAAAE,GAAA,IAAAN,EAAAO,WAAAD,GAC7B,OAAAL,CACX,CA/DAO,QAAAC,IADA,aACA,2BAiEO,MAAAC,EAAA,EAA8BC,cAAA,GAClBC,SACfC,OACAC,WACAC,SAAA,GACUC,aAAA,EACEC,WAAA,QAEhB,MAEIH,EAAAA,GAAA,cAEOD,EAAA,IAAAA,IACPK,QAAAN,GAEA,IAAA,IAAAN,EAAAK,EAAAR,OAAA,EAAAG,KAAAA,IACSO,EAAAK,QAAAP,EAAAL,IAGT,IAAAa,EAAA,UAEIC,EAAA,IAAAzB,EAEA0B,EA9ER,SAAAR,EAAAS,GAYI,IAXA,IAVJC,EAUIF,EAAA,CAAA,EACAG,EAAA,CAAYxB,EAAA,CACLyB,EAAA,IACIC,EAAA,KAEPC,EAAA,CACGF,EAAA,EACIC,EAAA,IAIXE,EAAA,EAAAA,GAAAf,EAAAV,SAAAyB,EACa,IAAA,IAAAC,EAAA,EAAAA,GAAAhB,EAAAe,GAAAzB,SAAA0B,EAAA,CACDL,EAAAxB,EAAA0B,EAAAE,IAAeJ,EAAAxB,EAAA0B,EAAAE,GACfJ,EAAAxB,EAAAyB,EAAAI,IAAeL,EAAAxB,EAAAyB,EAAAI,GACfL,EAAAG,EAAAD,EAAAE,IAAeJ,EAAAG,EAAAD,EAAAE,GACfJ,EAAAG,EAAAF,EAAAI,IAAeL,EAAAG,EAAAF,EAAAI,GACnB,IAAAC,EAAA,CAAgBP,EAAAV,EAAAe,GAAAC,IAGhB,GAAA,MAAAC,EAAAP,EAAA,CACI,IAAAQ,EAAAC,KAAAC,MAAAC,YAAA,CAAkCT,EAAAI,EAC/BH,EAAAE,IAIH,iBAAAE,EAAAP,EAA4BO,EAAAK,EAAA,IAAS,kBAAAL,EAAAP,EACHO,EAAAK,EAAA,IAASL,EAAAP,aAAAa,MAE3CN,EAAAK,EAAA,IACAL,EAAAO,EAAAL,KAAAM,IAAAC,OAAA,IACAT,EAAAP,GAzChBA,EAyCgBO,EAAAP,GAvCRa,KAAAI,MAAAjB,GACJ,IAAAa,KAAAA,KAAAK,IAAA,KAAA,GAAA,MAAA,QAuCeX,EAAAK,EAAA,IAEPd,EAAAU,GAAAD,CAdoB,CAcL,CAIhB,OADHN,EAAAxB,EAAAyB,EAAA,MAAsBJ,EAAA,QAAAW,KAAAC,MAAAS,aAAAlB,IACnBH,CACX,CAsCQsB,CAAA9B,GASJ,GAPIE,EAAAZ,OAAA,IACIkB,EAAA,aAAmBA,EAAA,WAAA,IAChBN,EAAA6B,SAAAC,IACHxB,EAAA,WAAAyB,KAAAd,KAAAC,MAAAc,aAAAF,GAAA,KAIR7B,EAAA,CAEI,MAAAgC,EAAAnC,EAAAoC,KAAsBC,GAAAA,EAAAD,KAAAE,GAGd,MAAAA,EACW,CAAAC,IAAA,IAEPD,EAAAE,WAAA9C,WAAA,GAAA,IAGO,CAAA6C,IAAA,EAAAD,EAAAE,WAAAlD,QAIA,CAAAiD,IAAAD,EAAAE,WAAAlD,YAOf,IAAAmD,EAAAN,EAAA,GACJ,IAAA,IAAA1C,EAAA,EAAAA,EAAA0C,EAAA7C,OAAAG,IACI,IAAA,IAAAiD,EAAA,EAAAA,EAAAP,EAAA1C,GAAAH,OAAAoD,IACQD,EAAAC,GAAA,IAAAP,EAAA1C,GAAAiD,GAAA,MACOD,EAAAC,GAAA,IAAAP,EAAA1C,GAAAiD,GAAA,KAInBlC,EAAA,SAAAiC,CAAc,CAIflC,EAAAvB,WAAAiD,KAAA3B,GACAC,EAAAtB,OAAAqB,GAAAE,EAEC,IAAAmC,EAAAxB,KAAAyB,MAAArC,EAAA,CAAuBH,WACvByC,SAAA,EACSC,KAAA,WAKFC,OAAAC,OAAA,IAAAC,KAAA,CAAA/D,EAAAyD,IAAA,CACqBG,KAAA,6BAEvB,GAAA7C,KAAAG,IASL"}